package 람다;
/**
 * 작성자 : kudd
 * 함수형 인터페이스란?
 * 람다식을 사용하기 위해서는 함수형 인테페이스를 구현해야 합니다.
 * 인터페이스의 경우 여러개의 추상 메서드들을 포함할 수 있지만 함수형 인터페이스의 경우 단 하나의 추상메서드만 포함할 수 있습니다.(여러개의 추상 메서드 선언 불가)
 * 즉 Functional Interface 는 일반적으로 '구현해야 할 추상 메소드가 하나만 정의된 인터페이스'를 가리킵니다.
 * 함수형 인터페이스는 @FunctionalInterface 어노테이션을 통해 선언할 수 있습니다.
 */
public class 함수형인터페이스예제1 {

    public static void main(String[] args) {

        // 인터페이스를 구현하기 위해서 implement 통해서 구현 혹은 아래와 같이 메소드를 오버라이딩 했어야 합니다.
        매게변수없는함수형인터페이스 익명클래스구현 = new 매게변수없는함수형인터페이스() {
            @Override
            public void 매게변수없는메소드() {
                System.out.println("익명클래스를 통한 구현 없는 인터페이스를 구현");
            }
        };

        // 인터페이스를 구현하고 인터페이스의 메소드를 호출 합니다.
        익명클래스구현.매게변수없는메소드();

        /*
        오버라이딩을 통해 '매게변수없는메소드' 구현시 다소 긴 문장이 필요했지만 람다에서는 단 한줄로 처리가 가능합니다.
        보다 간결하게 추상메서드를 구현할 수 있는 것입니다.
        다만 너무 많이 사용할 경우 오히려 가독성이 떨어집니다.
        */
        매게변수없는함수형인터페이스 람다구현1 = () -> {System.out.println("람다를 통한 구현1");};  // OK
        람다구현1.매게변수없는메소드();

        /*  한줄로 표현할 경우 블록처리 '{}' 생략이 가능합니다. */
        매게변수없는함수형인터페이스 람다구현2 = () -> System.out.println("람다를 통한 구현2");    // OK
        람다구현2.매게변수없는메소드();

        /* 매게변수가 있는 인터페이스 구현시 대게 구현해야 할 메소드의 자료형이 추론 가능하기 때문에 생략 가능합니다. */
        매게변수있는함수형인터페이스 람다구현3 = (String 아이디,String 이름) -> System.out.printf("람다를 통한 구현3 \t 당신의 ID %s 이름 %s \n", 아이디, 이름);
        람다구현3.매게변수있는메소드("kouydong", "고의동");

        매게변수있는함수형인터페이스 람다구현4 = (아이디, 이름) -> System.out.printf("람다를 통한 구현4 \t 당신의 ID %s 이름 %s \n", 아이디, 이름);
        람다구현4.매게변수있는메소드("kouydong", "고의동");

        /* 매게변수가 하나인 경우 소괄호 생략이 가능합니다. */
        매게변수있는함수형인터페이스2 람다구현5 = (나이) -> System.out.printf("람다를 통한 구현5 \t 당신의 나이는 %d 입니다\n", 나이);
        람다구현5.매게변수있는메소드(30);

        매게변수있는함수형인터페이스2 람다구현6 = 나이 -> System.out.printf("람다를 통한 구현6 \t 당신의 나이는 %d 입니다\n", 나이);
        람다구현6.매게변수있는메소드(30);

        /* 반환형 함수 인터페이스의 경우 중괄호 '{}' 생략이 불가능 합니다. */
        반환함수형인터페이스 람다구현7 = (주소) -> { return 주소;};
        String 주소 = 람다구현7.반화형함수형인터페이스("서울시");
        System.out.printf("당신의 주소는 %s입니다.", 주소);

//        반환함수형인터페이스 람다구현8 = 주소 -> return 주소; // ERROR
//        람다구현8.반화형함수형인터페이스("서울시");
    }


    @FunctionalInterface
    interface 매게변수없는함수형인터페이스 {
        void 매게변수없는메소드();
    }

    interface 매게변수있는함수형인터페이스 {
        void 매게변수있는메소드(String 아이디, String 이름);
    }

    interface 매게변수있는함수형인터페이스2 {
        void 매게변수있는메소드(int 나이);
    }

    interface 반환함수형인터페이스 {
        String 반화형함수형인터페이스(String 주소);
    }
}